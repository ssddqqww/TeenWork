import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from db import init_pool, close_pool, save_user


logging.basicConfig(level=logging.INFO)

dp = Dispatcher(storage=MemoryStorage())

SKILLS = [
    "SMM",
    "–î–∏–∑–∞–π–Ω",
    "–ê–Ω–∞–ª—ñ—Ç–∏–∫",
    "–ö–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä",
    "–†–µ—Ç—É—à–µ—Ä",
    "–†–æ–∑—Ä–æ–±–Ω–∏–∫ –æ–ø–∏—Ç—É–≤–∞–Ω—å",
    "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á",
    "–í—ñ–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä",
]


class Reg(StatesGroup):
    name = State()
    age = State()
    skills = State()


def build_skills_kb(selected: list[str]) -> InlineKeyboardMarkup:
    rows = []
    for s in SKILLS:
        if s not in selected:
            rows.append([InlineKeyboardButton(text=s, callback_data=f"skill:{s}")])
    rows.append([InlineKeyboardButton(text="‚úÖ –í—Å–µ", callback_data="done")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–∏–π(-–∞)"
def ready_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–∏–π(-–∞)")]],
        resize_keyboard=True
    )
    return keyboard
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    start_text = (
        "–ü—Ä–∏–≤—ñ—Ç, –¥–æ—Ä–æ–≥–∏–π(-–∞) —É—á–∞—Å–Ω–∏–∫—É(-—Ü–µ). üëã\n\n"
        "–Ø - –±–æ—Ç –º–æ–ª–æ–¥—ñ–∂–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó, —è–∫–∏–π\n"
        "üìé–¥–æ–ø–æ–º–æ–∂–µ –¢–æ–±—ñ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ –¢–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏;\n"
        "üìé–∑–Ω–∞–π–¥–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¢–≤–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É, –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —è–∫–∏—Ö –¢–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à "
        "–±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏.\n\n"
        "‚è∞–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É, –∑–∞ —è–∫–∏–π –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ "
        "–∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –∑–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –¢–≤–æ—é —Ä–æ–±–æ—Ç—É —ñ –∞–±–æ "
        "–¥–∞—Å—Ç—å –¢–æ–±—ñ –±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏, –∞–±–æ –Ω–∞–¥—ñ—à–ª–µ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è. *–Ø–∫—â–æ –¢–∏ –Ω–µ –≤—Å—Ç–∏–≥–Ω–µ—à "
        "–≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω—É, –∑–∞–≤–¥–∞–Ω–Ω—è –∞–Ω—É–ª—é—î—Ç—å—Å—è.\n\n"
        "-> –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¢–∏ - –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞ –º–æ–ª–æ–¥–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, —É–º—ñ—î—à –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ–∑ Canva/ "
        "—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É –°–æ—Ü–º–µ—Ä–µ–∂–∞—Ö, –±–æ—Ç –ø—ñ–¥–±–µ—Ä–µ –¢–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –¢–∏ "
        "–∑–º–æ–∂–µ—à –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 24 –≥–æ–¥–∏–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ, —è–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ "
        "—è–∫—ñ—Å–Ω–æ, –¢–∏ –æ—Ç—Ä–∏–º–∞—î—à –±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏. ü™ô\n\n"
        "üòâ\n–û—Ç–æ–∂, —è–∫—â–æ –≥–æ—Ç–æ–≤–∏–π(–∞) –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞ —Ü–µ –±–æ–Ω—É—Å–∏, –¥–∞–≤–∞–π "
        "–ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è!"
    )
    
    await message.answer(start_text, reply_markup=ready_keyboard())


@dp.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–∏–π(-–∞)")
async def ready_pressed(message: types.Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer("–Ø–∫ –¢–µ–±–µ –∑–≤–∞—Ç–∏?")


@dp.message(Reg.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(Reg.age)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –¢–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@dp.message(Reg.age)
async def reg_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
    except Exception:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")
        return
    await state.update_data(age=age, selected=[])
    kb = build_skills_kb([])
    await state.set_state(Reg.skills)
    await message.answer("–Ø–∫–∏–π –¥–æ—Å–≤—ñ–¥ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –º–∞—î—à", reply_markup=kb)


@dp.callback_query(Reg.skills, F.data.startswith("skill:"))
async def pick_skill(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[str] = list(data.get("selected", []))
    skill = callback.data.split(":", 1)[1]
    if skill not in selected:
        selected.append(skill)
    await state.update_data(selected=selected)
    text = "–û–±—Ä–∞–Ω–æ: " + ", ".join(selected) if selected else "–û–±—Ä–∞–Ω–æ: -"
    await callback.message.edit_text(text, reply_markup=build_skills_kb(selected))
    await callback.answer()


@dp.callback_query(Reg.skills, F.data == "done")
async def skills_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "")
    age = int(data.get("age", 0))
    selected: list[str] = list(data.get("selected", []))
    await save_user(callback.from_user.id, name, age, selected)
    await state.clear()
    await callback.message.edit_text("–ì–æ—Ç–æ–≤–æ")
    await callback.answer()
    
async def main():
    await init_pool()
    bot = Bot(BOT_TOKEN)
    try:
        await dp.start_polling(bot)
    finally:
        await close_pool()
    
if __name__ == "__main__":
    asyncio.run(main())