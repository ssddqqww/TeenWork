import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, ADMIN_IDS
from db import init_pool, close_pool, save_user, get_user_by_telegram, get_tasks_by_skills, get_task_by_id, list_all_users, create_user_task, get_user_task_by_id, update_user_task_status, save_user_task_file, list_user_task_files, increment_user_points
from db import list_submitted_user_tasks, get_user_by_id, has_in_progress_task_for_telegram
import asyncio
import re


logging.basicConfig(level=logging.INFO)

dp = Dispatcher(storage=MemoryStorage())

SKILLS = [
    "SMM",
    "–î–∏–∑–∞–π–Ω",
    "–ê–Ω–∞–ª—ñ—Ç–∏–∫",
    "–ö–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä",
    "–†–µ—Ç—É—à–µ—Ä",
    "–†–æ–∑—Ä–æ–±–Ω–∏–∫ –æ–ø–∏—Ç—É–≤–∞–Ω—å",
    "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á",
    "–í—ñ–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä",
]


class Reg(StatesGroup):
    name = State()
    age = State()
    skills = State()


class Submit(StatesGroup):
    files = State()


def build_skills_kb(selected: list[str]) -> InlineKeyboardMarkup:
    rows = []
    for s in SKILLS:
        if s not in selected:
            rows.append([InlineKeyboardButton(text=s, callback_data=f"skill:{s}")])
    rows.append([InlineKeyboardButton(text="‚úÖ –í—Å–µ", callback_data="done")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def main_menu_keyboard(user_id: int | None = None) -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–≤–¥–∞–Ω–Ω—è"), KeyboardButton(text="–ü—Ä–æ—Ñ—ñ–ª—å"), KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞/–Ü–Ω—Ñ–æ")]],
        resize_keyboard=True
    )
    if user_id is not None and user_id in ADMIN_IDS:
        keyboard.keyboard.append([KeyboardButton(text="–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])
    return keyboard


class TaskLockMiddleware:
    async def __call__(self, handler, event, data):
        try:
            user_id = None
            is_admin = False
            state: FSMContext | None = data.get("state")
            if isinstance(event, types.Message):
                user_id = event.from_user.id
            elif isinstance(event, types.CallbackQuery):
                user_id = event.from_user.id
            if user_id is None:
                return await handler(event, data)
            if user_id in ADMIN_IDS:
                is_admin = True
            if is_admin:
                return await handler(event, data)
            if not await has_in_progress_task_for_telegram(user_id):
                return await handler(event, data)
            allowed = False
            if isinstance(event, types.Message):
                if state is not None:
                    cur = await state.get_state()
                    if cur == Submit.files.state:
                        allowed = True
                text = (event.text or "").strip()
                if text == "–ó–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É":
                    allowed = True
                if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–¥–∞—á—É":
                    allowed = True
                if text == "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
                    allowed = True
                if text.startswith("/done"):
                    allowed = True
                if event.content_type in {"photo", "document", "video", "audio", "voice"}:
                    allowed = True
                if not allowed or delete_messages:
                    try:
                        await event.delete()
                    except Exception:
                        pass
                    return None
                return await handler(event, data)
            elif isinstance(event, types.CallbackQuery):
                try:
                    await event.answer()
                except Exception:
                    pass
                return None
            return await handler(event, data)
        except Exception:
            return await handler(event, data)


class CleanupMiddleware:
    async def __call__(self, handler, event, data):
        try:
            state: FSMContext | None = data.get("state")
            if isinstance(event, types.Message):
                if delete_messages:
                    try:
                        await event.delete()
                    except Exception:
                        pass
                to_delete: list[int] = []
                if state is not None:
                    try:
                        stored = await state.get_data()
                        to_delete = list(stored.get("to_delete", []))
                    except Exception:
                        to_delete = []
                if to_delete:
                    chat_id = event.chat.id
                    bot = event.bot
                    if delete_messages:
                        for mid in set(to_delete):
                            try:
                                await bot.delete_message(chat_id, mid)
                            except Exception:
                                pass
                        if state is not None:
                            try:
                                await state.update_data(to_delete=[])
                            except Exception:
                                pass
            return await handler(event, data)
        except Exception:
            return await handler(event, data)


dp.message.middleware(CleanupMiddleware())
dp.callback_query.middleware(CleanupMiddleware())
dp.message.middleware(TaskLockMiddleware())
dp.callback_query.middleware(TaskLockMiddleware())

def back_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–∏–π(-–∞)"
def ready_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–∏–π(-–∞)")]],
        resize_keyboard=True
    )
    return keyboard


delete_messages = False
async def cleanup_user_messages(message: types.Message, state: FSMContext):
    if delete_messages:
        try:
            await message.delete()
        except Exception:
            pass


async def track_message(state: FSMContext, message_id: int):
    try:
        data = await state.get_data()
        to_delete = list(data.get("to_delete", []))
        to_delete.append(message_id)
        await state.update_data(to_delete=to_delete)
    except Exception:
        pass
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    start_text = (
        "<b>–ü—Ä–∏–≤—ñ—Ç, –¥–æ—Ä–æ–≥–∏–π(-–∞) —É—á–∞—Å–Ω–∏–∫—É(-—Ü–µ). üëã</b>\n\n"
        "<b>–Ø - –±–æ—Ç –º–æ–ª–æ–¥—ñ–∂–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</b>, —è–∫–∏–π:\n"
        "<i>üìé–¥–æ–ø–æ–º–æ–∂–µ –¢–æ–±—ñ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ –¢–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏;</i>\n"
        "<i>üìé–∑–Ω–∞–π–¥–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¢–≤–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É, –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —è–∫–∏—Ö –¢–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à </i>"
        "<b>–±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏.</b>\n\n"
        "<i>‚è∞–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤—ñ–¥–ª—ñ–∫ —á–∞—Å—É, –∑–∞ —è–∫–∏–π –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ </i>"
        "<i>–∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –∑–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –¢–≤–æ—é —Ä–æ–±–æ—Ç—É —ñ –∞–±–æ </i>"
        "–¥–∞—Å—Ç—å –¢–æ–±—ñ –±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏, –∞–±–æ –Ω–∞–¥—ñ—à–ª–µ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è. <b>–Ø–∫—â–æ –¢–∏ –Ω–µ –≤—Å—Ç–∏–≥–Ω–µ—à </b>"
        "<b>–≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω—É, –∑–∞–≤–¥–∞–Ω–Ω—è –∞–Ω—É–ª—é—î—Ç—å—Å—è.</b>\n\n"
        "-&gt; –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¢–∏ - –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞ –º–æ–ª–æ–¥–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, —É–º—ñ—î—à –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ–∑ Canva/ "
        "—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É –°–æ—Ü–º–µ—Ä–µ–∂–∞—Ö, –±–æ—Ç –ø—ñ–¥–±–µ—Ä–µ –¢–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –¢–∏ "
        "–∑–º–æ–∂–µ—à –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 24 –≥–æ–¥–∏–Ω. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ, —è–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ "
        "—è–∫—ñ—Å–Ω–æ, –¢–∏ –æ—Ç—Ä–∏–º–∞—î—à –±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏. ü™ô\n\n"
        "üòâ\n<b>–û—Ç–æ–∂, —è–∫—â–æ –≥–æ—Ç–æ–≤–∏–π(–∞) –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞ —Ü–µ –±–æ–Ω—É—Å–∏, –¥–∞–≤–∞–π </b>"
        "<b>–ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è!</b>"
    )
    existing = await get_user_by_telegram(message.from_user.id)
    if existing:
        await state.clear()
        user_name = existing.get("name", "")
        await message.answer(
            f"–ß—É–¥–æ–≤–æ, {user_name}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ\nüëá",
            reply_markup=main_menu_keyboard(message.from_user.id)
        )
        return
    await state.clear()
    sent = await message.answer(start_text, reply_markup=ready_keyboard())
    await state.update_data(to_delete=[sent.message_id, message.message_id])


@dp.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–∏–π(-–∞)")
async def ready_pressed(message: types.Message, state: FSMContext):
    existing = await get_user_by_telegram(message.from_user.id)
    if existing:
        await message.answer("<code>–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω</code>", reply_markup=ReplyKeyboardRemove())
        return
    data = await state.get_data()
    to_delete = list(data.get("to_delete", []))
    to_delete.append(message.message_id)
    await state.update_data(to_delete=to_delete)
    await state.set_state(Reg.name)
    bot_msg = await message.answer("–Ø–∫ –¢–µ–±–µ –∑–≤–∞—Ç–∏?", reply_markup=ReplyKeyboardRemove())
    await track_message(state, bot_msg.message_id)


@dp.message(Reg.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    data = await state.get_data()
    to_delete = list(data.get("to_delete", []))
    to_delete.append(message.message_id)
    await state.update_data(to_delete=to_delete)
    await state.set_state(Reg.age)
    bot_msg = await message.answer("–°–∫—ñ–ª—å–∫–∏ –¢–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    await track_message(state, bot_msg.message_id)


@dp.message(Reg.age)
async def reg_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text.strip())
    except Exception:
        await message.answer("<code>–í–≤–µ–¥–∏ —á–∏—Å–ª–æ</code>")
        return
    if age < 0 or age > 100:
        await message.answer("<code>–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100</code>")
        return
    data = await state.get_data()
    to_delete = list(data.get("to_delete", []))
    to_delete.append(message.message_id)
    await state.update_data(age=age, selected=[], to_delete=to_delete)
    kb = build_skills_kb([])
    await state.set_state(Reg.skills)
    bot_msg = await message.answer("–Ø–∫–∏–π –¥–æ—Å–≤—ñ–¥ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ –º–∞—î—à", reply_markup=kb)
    await track_message(state, bot_msg.message_id)


@dp.callback_query(Reg.skills, F.data.startswith("skill:"))
async def pick_skill(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: list[str] = list(data.get("selected", []))
    skill = callback.data.split(":", 1)[1]
    if skill not in selected:
        selected.append(skill)
    await state.update_data(selected=selected)
    text = "–û–±—Ä–∞–Ω–æ: " + ",".join(selected) if selected else "–û–±—Ä–∞–Ω–æ: -"
    if delete_messages:
        await callback.message.edit_text(text, reply_markup=build_skills_kb(selected))
    else:
        await callback.message.answer(text, reply_markup=build_skills_kb(selected))
    await callback.answer()


@dp.callback_query(Reg.skills, F.data == "done")
async def skills_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "")
    age = int(data.get("age", 0))
    selected: list[str] = list(data.get("selected", []))
    await save_user(callback.from_user.id, name, age, selected)
    chat_id = callback.message.chat.id
    to_delete = list(data.get("to_delete", []))
    if delete_messages:
        for mid in set(to_delete):
            try:
                await callback.message.bot.delete_message(chat_id, mid)
            except Exception:
                pass
        try:
            await callback.message.bot.delete_message(chat_id, callback.message.message_id)
        except Exception:
            pass
    await state.clear()
    await callback.message.bot.send_message(
        chat_id,
        f"–ß—É–¥–æ–≤–æ, {name}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ\nüëá",
        reply_markup=main_menu_keyboard(callback.from_user.id)
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("review_files:"))
async def review_files(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer()
        return
    try:
        user_task_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    files = await list_user_task_files(user_task_id)
    if not files:
        await callback.message.answer("<code>–§–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.</code>")
        await callback.answer()
        return
    await callback.message.answer(f"–§–∞–π–ª–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ #{user_task_id}:")
    for f in files[:20]:
        if f["file_type"] == "photo":
            await callback.message.bot.send_photo(callback.message.chat.id, f["file_id"], caption=f.get("caption"))
        elif f["file_type"] == "document":
            await callback.message.bot.send_document(callback.message.chat.id, f["file_id"], caption=f.get("caption"))
        elif f["file_type"] == "video":
            await callback.message.bot.send_video(callback.message.chat.id, f["file_id"], caption=f.get("caption"))
        elif f["file_type"] == "audio":
            await callback.message.bot.send_audio(callback.message.chat.id, f["file_id"], caption=f.get("caption"))
        elif f["file_type"] == "voice":
            await callback.message.bot.send_voice(callback.message.chat.id, f["file_id"], caption=f.get("caption"))
    await callback.answer()


@dp.callback_query(F.data.startswith("approve:"))
async def approve_task(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer()
        return
    try:
        user_task_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    ut = await get_user_task_by_id(user_task_id)
    if not ut:
        await callback.answer()
        return
    task = await get_task_by_id(ut["task_id"])
    points_str = task.get("title") or "0"
    digits = re.findall(r"\d+", points_str)
    points = int(digits[0]) if digits else 0
    await update_user_task_status(user_task_id, "approved")
    await increment_user_points(ut["user_id"], points)
    user = await get_user_by_id(ut["user_id"])
    if user:
        await callback.message.bot.send_message(
            user["telegram_id"],
            f"–ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞! <b>–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è –æ—Ü—ñ–Ω–µ–Ω–æ!</b> –¢–∏ –æ—Ç—Ä–∏–º—É—î—à {points} –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤.\n–•–æ—á–µ—à –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è? –¢–æ–¥—ñ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É <code>¬´–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è¬ª</code>",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")],[KeyboardButton(text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å")]], resize_keyboard=True)
        )
    if delete_messages:
        await callback.message.edit_text("<code>–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ</code>")
    else:
        await callback.message.answer("<code>–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ</code>")
    await callback.answer()


@dp.callback_query(F.data.startswith("reject:"))
async def reject_task(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer()
        return
    try:
        user_task_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    ut = await get_user_task_by_id(user_task_id)
    if not ut:
        await callback.answer()
        return
    await update_user_task_status(user_task_id, "rejected")
    user = await get_user_by_id(ut["user_id"])
    if user:
        await callback.message.bot.send_message(
            user["telegram_id"],
            "‚ùå–ù–∞ –∂–∞–ª—å, <b>–¢–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–≤/ –≤–∏–∫–æ–Ω–∞–ª–∞ —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—É–Ω–∫—Ç–∏</b>, —è–∫—ñ –≤–∫–ª—é—á–∞–ª–æ –∑–∞–≤–¥–∞–Ω–Ω—è.\n–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –¢–æ–±—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ <b>–¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</b>. –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—é\n—Ä–æ–±–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.",
        )
    if delete_messages:
        await callback.message.edit_text("<code>–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</code>")
    else:
        await callback.message.answer("<code>–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</code>")
    await callback.answer()


@dp.message(F.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å")
async def check_balance(message: types.Message):
    user = await get_user_by_telegram(message.from_user.id)
    points = (user or {}).get("points", 0)
    await message.answer(
        f"‚ö°Ô∏è\n–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É {points} –±–∞–ª—ñ–≤. –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤ ‚Äì –≤–∏–∫–æ–Ω—É–π—Ç–µ –±—ñ–ª—å—à–µ\n–∑–∞–≤–¥–∞–Ω—å!",
        reply_markup=back_menu_keyboard()
    )


@dp.message(F.text == "–ü—Ä–∞–≤–∏–ª–∞/–Ü–Ω—Ñ–æ")
async def rules_info(message: types.Message):
    text = (
        "‚ÑπÔ∏è –¢—É—Ç –∫–æ—Ä–æ—Ç–∫—ñ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "üëáüèº\n"
        "1. –í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è —É <b>–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å</b>.\n"
        "2. –Ø–∫—â–æ <b>—Ä–æ–±–æ—Ç–∞ —è–∫—ñ—Å–Ω–∞</b> ‚Äî –æ—Ç—Ä–∏–º—É—î—à <b>–±–∞–ª–∏</b>.\n"
        "3. –Ø–∫—â–æ <b>–∑–∞–ø—ñ–∑–Ω–∏–≤—Å—è/–∑–¥–∞–≤ –Ω–µ—è–∫—ñ—Å–Ω–æ</b> ‚Äî –∑–∞–≤–¥–∞–Ω–Ω—è <b>–∞–Ω—É–ª—é—î—Ç—å—Å—è</b> –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞\n"
        "<b>–¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</b>\n"
        "–Ø–∫—â–æ —É—Å–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —Å–ø—Ä–æ–±—É–π –≤–∏–∫–æ–Ω–∞—Ç–∏ —Å–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è!\n"
        "‚ö°Ô∏è"
    )
    await message.answer(text, reply_markup=back_menu_keyboard())


def build_tasks_kb(tasks: list[dict]) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for t in tasks:
        skill = t.get("skill_required") or ""
        tid = t.get("id")
        rows.append([InlineKeyboardButton(text=skill, callback_data=f"task:{tid}")])
    if not rows:
        rows = [[InlineKeyboardButton(text="–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å", callback_data="noop")]]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


@dp.message(F.text == "–ó–∞–≤–¥–∞–Ω–Ω—è")
async def list_tasks(message: types.Message):
    user = await get_user_by_telegram(message.from_user.id)
    if not user:
        await message.answer("<b>–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è:</b> <code>/start</code>", reply_markup=ready_keyboard())
        return
    skills_raw = user.get("skills", "")
    skills = [s.strip() for s in skills_raw.split(",") if s.strip()]
    tasks = await get_tasks_by_skills(skills)
    kb = build_tasks_kb(tasks)
    sent = await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏:", reply_markup=kb)
    try:
        state = dp.fsm.get_context(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id)  # type: ignore
        await track_message(state, sent.message_id)  # type: ignore
    except Exception:
        pass


@dp.message(F.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def get_task_again(message: types.Message):
    await list_tasks(message)


@dp.callback_query(F.data.startswith("task:"))
async def show_task(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    task = await get_task_by_id(task_id)
    if not task:
        await callback.answer("<code>–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</code>", show_alert=False)
        return
    skill = task.get("skill_required") or ""
    description = task.get("description") or ""
    points = task.get("title") or ""
    text = f"[{skill}]\n\n{description}\n\n–ë–∞–ª–∏: {points}"
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data=f"accept:{task_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    if delete_messages:
        await callback.message.edit_text("<code>–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</code>")
    else:
        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()


@dp.callback_query(F.data.startswith("accept:"))
async def accept_task(callback: types.CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return
    # map telegram_id to Users.id
    user = await get_user_by_telegram(callback.from_user.id)
    if not user:
        await callback.answer("<code>–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è</code>", show_alert=True)
        return
    user_task_id = await create_user_task(user_id=user["id"], task_id=task_id)
    task = await get_task_by_id(task_id)
    deadline_hours = int(task.get("deadline_hours") or 0)
    if delete_messages:
        await callback.message.edit_text("–ó–∞–≤–¥–∞–Ω–Ω—è <b>–ø—Ä–∏–π–Ω—è—Ç–æ</b>. –ú–æ–∂–µ—à –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –∫–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π.")
    else:
        await callback.message.answer("–ó–∞–≤–¥–∞–Ω–Ω—è <b>–ø—Ä–∏–π–Ω—è—Ç–æ</b>. –ú–æ–∂–µ—à –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –∫–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π.")
    await callback.message.answer(
        "–ö–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π –∑–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=submit_keyboard(user_task_id)
    )
    await state.update_data(current_user_task_id=user_task_id)
    bot: Bot = callback.message.bot
    asyncio.create_task(schedule_halfway_reminder(bot, user_task_id, callback.message.chat.id, deadline_hours))
    await callback.answer()


def submit_keyboard(user_task_id: int) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")], [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    return kb


@dp.message(F.text == "–ó–¥–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
async def submit_work_start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_task_id = data.get("current_user_task_id")
    if not user_task_id:
        await message.answer("<code>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.</code>")
        return
    await state.set_state(Submit.files)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–¥–∞—á—É")], [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("<b>–ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª(–∏)</b> –∑ –¥–æ–∫–∞–∑–∞–º–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ <code>¬´–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–¥–∞—á—É¬ª</code>", reply_markup=kb)


@dp.message(Submit.files, F.content_type.in_({"photo", "document", "video", "audio", "voice"}))
async def collect_files(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_task_id = int(data.get("current_user_task_id"))
    file_id = None
    file_type = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.audio:
        file_id = message.audio.file_id
        file_type = "audio"
    elif message.voice:
        file_id = message.voice.file_id
        file_type = "voice"
    if file_id and file_type:
        await save_user_task_file(user_task_id, file_id, file_type, message.caption)
        await message.answer("<code>–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ.</code> –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ <code>¬´–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–¥–∞—á—É¬ª</code>")


@dp.message(Submit.files, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–¥–∞—á—É")
async def submit_done(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_task_id = int(data.get("current_user_task_id"))
    await update_user_task_status(user_task_id, "submitted")
    await state.clear()
    await message.answer(
        "üéâ –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è <b>—É—Å–ø—ñ—à–Ω–æ –∑–¥–∞–Ω–æ</b>* –ó–∞—á–µ–∫–∞–π, –ø–æ–∫–∏ –π–æ–≥–æ <b>–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!</b>",
        reply_markup=main_menu_keyboard(message.from_user.id)
    )


@dp.message(F.text == "–ü—Ä–æ—Ñ—ñ–ª—å")
async def show_profile(message: types.Message, state: FSMContext):
    await cleanup_user_messages(message, state)
    user = await get_user_by_telegram(message.from_user.id)
    if not user:
        sent = await message.answer("–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è: <code>/start</code>", reply_markup=ready_keyboard())
        await state.update_data(to_delete=[sent.message_id])
        return
    name = user.get("name", "")
    age = user.get("age", 0)
    skills_raw = user.get("skills", "")
    skills_display = ", ".join([s for s in skills_raw.split(",") if s]) if skills_raw else "-"
    points = user.get("points", 0)
    text = (
        f"üëáüèºüìä –û—Å—å —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å {name}:\n"
        f"üë§ –Ü–º º—è: {name}\n"
        f"üéÇ –í—ñ–∫: {age}\n"
        f"üí° –ù–∞–≤–∏—á–∫–∏: {skills_display}\n"
        f"ü™ô –ë–∞–ª–∏: {points}\n"
        f"–ë–∞–∂–∞—î—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —á–∏ —á–∏—Ç–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª?"
    )
    sent = await message.answer(text, reply_markup=back_menu_keyboard())
    await state.update_data(to_delete=[sent.message_id])


@dp.message(F.text == "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    user = await get_user_by_telegram(message.from_user.id)
    name = (user or {}).get("name", "")
    await message.answer(
        f"–ß—É–¥–æ–≤–æ, {name}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ\nüëá",
        reply_markup=main_menu_keyboard(message.from_user.id)
    )

@dp.callback_query(F.data == "back_to_menu")
async def back_inline_to_menu(callback: types.CallbackQuery):
    await callback.answer()
    user = await get_user_by_telegram(callback.from_user.id)
    name = (user or {}).get("name", "")
    await callback.message.answer(
        f"–ß—É–¥–æ–≤–æ, {name}! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ\nüëá",
        reply_markup=main_menu_keyboard(callback.from_user.id)
    )


def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"), KeyboardButton(text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç")], [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    return keyboard


async def schedule_halfway_reminder(bot: Bot, user_task_id: int, user_chat_id: int, deadline_hours: int):
    try:
        if not deadline_hours or deadline_hours <= 0:
            return
        half_seconds = int(deadline_hours * 3600 / 2)
        await asyncio.sleep(half_seconds)
        ut = await get_user_task_by_id(user_task_id)
        if not ut or ut.get("status") != "in_progress":
            return
        await bot.send_message(
            user_chat_id,
            "<b>‚è≥–£–≤–∞–≥–∞!</b> –£ –¢–µ–±–µ –∑–∞–ª–∏—à–∏–ª–∞—Å—è <b>–ø–æ–ª–æ–≤–∏–Ω–∞ —á–∞—Å—É</b> –Ω–∞ <i>–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è</i>. –ë—É–¥—å –ª–∞—Å–∫–∞,\n<i>–≤–∏–∫–æ–Ω–∞–π –π–æ–≥–æ</i> –¥–æ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω—É."
        )
    except Exception:
        pass


@dp.message(F.text == "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<code>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.</code>")
        return
    await message.answer("<code>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</code>", reply_markup=admin_menu_keyboard())


@dp.message(F.text == "–£—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
async def admin_list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<code>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.</code>")
        return
    users = await list_all_users()
    if not users:
        await message.answer("<code>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.</code>")
        return
    chunk: list[str] = []
    sent_any = False
    for u in users:
        line = f"#{u['id']} | {u.get('name','')} | {u.get('age','-')} | {u.get('skills','-')} | {u.get('points',0)}"
        chunk.append(line)
        if len("\n".join(chunk)) > 3500:
            await message.answer("\n".join(chunk))
            sent_any = True
            chunk = []
    if chunk:
        await message.answer("\n".join(chunk))
        sent_any = True
    if not sent_any:
        await message.answer("<code>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</code>")


@dp.message(F.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç")
async def admin_review_stub(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<code>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.</code>")
        return
    await message.answer("<code>–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...</code>")
    submitted = await list_submitted_user_tasks()
    if not submitted:
        await message.answer("<code>–ù–µ–º–∞—î –∑–¥–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç.</code>")
        return
    for item in submitted[:20]:
        text = (
            f"–ó–∞–¥–∞—á–∞ #{item['task_id']} [{item.get('skill_required','')}]\n"
            f"–û–ø–∏—Å: {item.get('description','')}\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: #{item['user_id']} {item.get('user_name','')}\n"
            f"–ë–∞–ª–∏: {item.get('title','')}\n"
        )
        buttons = [
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–∞–π–ª–∏", callback_data=f"review_files:{item['user_task_id']}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏", callback_data=f"approve:{item['user_task_id']}")],
            [InlineKeyboardButton(text="‚ùå –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è", callback_data=f"reject:{item['user_task_id']}")],
        ]
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    
async def main():
    await init_pool()
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    try:
        await dp.start_polling(bot)
    finally:
        await close_pool()
    
if __name__ == "__main__":
    asyncio.run(main())
